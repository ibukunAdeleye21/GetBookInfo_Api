// <auto-generated />
using BookInfo.API.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookInfo.API.Migrations
{
    [DbContext(typeof(BookContextInfo))]
    [Migration("20231022175011_IncludedUsers")]
    partial class IncludedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookInfo.API.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Description = "Journey to Heartfelt Connections and Love.",
                            Section = "Relationship Books"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Unleashing Potential: Your Journey to Self-Discovery.",
                            Section = "Personal Growth Books"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Unfolding the Mystical Pathway to Spiritual Transformation.",
                            Section = "Spiritual Books"
                        });
                });

            modelBuilder.Entity("BookInfo.API.Entities.PointOfInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("PointsOfInterest");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Author = "John Gray",
                            BookId = 3,
                            Description = "Nice Book.",
                            Name = "Men are from Mars, women are from Venus"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Myles Munroe",
                            BookId = 3,
                            Description = "Lovel Book",
                            Name = "Waiting and Dating"
                        },
                        new
                        {
                            Id = 7,
                            Author = "James Clear",
                            BookId = 4,
                            Description = "Awesome Book.",
                            Name = "Atomic Habits"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Tony Robbins",
                            BookId = 4,
                            Description = "Great Book.",
                            Name = "Awaken the Giant Within"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Robert Liadon",
                            BookId = 5,
                            Description = "Excellent Book.",
                            Name = "God's General"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Gbile Akanni",
                            BookId = 5,
                            Description = "Good Book",
                            Name = "He leads me"
                        });
                });

            modelBuilder.Entity("BookInfo.API.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Book")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookInfo.API.Entities.PointOfInterest", b =>
                {
                    b.HasOne("BookInfo.API.Entities.Book", "Book")
                        .WithMany("PointsOfInterest")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookInfo.API.Entities.Book", b =>
                {
                    b.Navigation("PointsOfInterest");
                });
#pragma warning restore 612, 618
        }
    }
}
